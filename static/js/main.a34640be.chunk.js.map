{"version":3,"sources":["components/Card.js","components/CardArray.js","components/SearchBox.js","components/NavBar.js","containers/ErrorBoundary.js","components/Robots.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","username","id","className","src","alt","cardArray","props","map","value","i","key","SearchBox","searchChange","reset","textChange","type","placeholder","onChange","onClick","NavBar","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","robots","App","onSearchChange","event","searchfield","target","onSearchButton","document","getElementById","onResetButton","onTextChange","filtering","filter","robot","toLowerCase","includes","length","CardArray","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a34640be.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name,email,id,username}) => {\n    return(\n        <div className='tc bg-light-blue dib br3 pa4 ma3 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${username}?size=200x200`} alt='robotaka'></img>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst cardArray = ({props}) => {\n    return(\n        <div>\n        {props.map((value,i) =>{\n            return(\n                <Card key={i} \n                id={props[i].id} \n                name={props[i].name} \n                username={props[i].username} \n                email={props[i].email}\n                />\n                );\n            })\n        }\n        </div>\n    );\n}\n\nexport default cardArray;","import React from 'react';\n\nconst SearchBox = ({searchChange, reset, textChange}) => {\n    return (\n        <div className='pa2'>\n            <form name=\"form\">\n                <input \n                className='pa2 ba b--green bg-lightest-blue'\n                type='text' \n                placeholder=\"search your robots\"\n                onChange = {textChange}\n                id='robot'\n                /> \n                <br></br>\n                <div className='pa2'>\n                <input\n                    type='button'\n                    value='Search Robot!'\n                    onClick={searchChange}\n                />\n                <input className='ml1'\n                    type='reset'\n                    onClick={reset}\n                    />\n                </div>\n            </form>\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst NavBar = (props) =>{\n    return (\n        <div style={{overflowY:\"scroll\", border:'2px solid', height:'525px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default NavBar;","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n    }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({hasError:true});\n    }\n\n    render(){\n        if(this.state.hasError){\n            return <h1>Oh! It is an error!!</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary;\n","export const robots = [\n    {\n        id: 0,\n        name: 'Takashi',\n        username: 'Takasan',\n        email: 'taka@gmail.com'\n    },\n\n    {\n        id: 1,\n        name: 'Elisa',\n        username: 'Elisan123',\n        email: 'elisa@gmail.com'\n    },\n\n    {\n        id: 2,\n        name: 'Ria',\n        username: 'ria123',\n        email: 'ria@gmail.com'\n    },\n    {\n        id: 3,\n        name: 'Koyuki',\n        username:'koyukoyu',\n        email:'koyukoyu@gmail.com'\n    },\n\n    {\n        id:4,\n        name:'Yumiko',\n        username:'yumiyumi',\n        email:'yumiko@gmail.com'\n    },\n    {\n        id:5,\n        name:'Masahiro',\n        username:'maachan',\n        email:'maachan@gmail.com'\n    },\n    {\n        id:6,\n        name:'Takeshi',\n        username:'kinutake',\n        email:'kinutake@gmail.com'\n    },\n    {\n        id:7,\n        name:'Mie',\n        username:'obaachan',\n        email:'mieobaachan@gmail.com'\n    },\n    {\n        id:8,\n        name:'Tetsuma',\n        username:'testunie',\n        email:'testunie@gmail.com'\n    },\n    {\n        id:9,\n        name:'Juri',\n        username:'julie',\n        email:'julie@gmail.com'\n    },\n    {\n        id:10,\n        name:'Shinsaku',\n        username:'shinnie',\n        email:'shinnie@gmail.com'\n    },\n    {\n        id:11,\n        name:'Kyoko',\n        username:'kyokosan',\n        email:'kyokosan@gmail.com'\n    }\n];","import React, {Component} from 'react';\nimport CardArray from '../components/CardArray';\nimport SearchBox from '../components/SearchBox';\nimport NavBar from '../components/NavBar';\nimport ErrorBoundary from '../containers/ErrorBoundary';\nimport {robots} from '../components/Robots';\nimport './App.css';\n\nclass App extends Component {\n    constructor(){\n        super()\n        this.state={\n            robots: robots,\n            searchfield:''\n        }\n    }\n\n    onSearchChange=(event)=>{ //it is a rule of thumb to use arrow function for any method that you are making. Then \"this\" refer to the class Object. \n        this.setState({searchfield: event.target.value});\n    }\n\n    onSearchButton =() =>{\n        this.setState({searchfield:document.getElementById('robot').value});\n    }\n\n    onResetButton =() => {\n        this.setState({searchfield:\"\"});\n    }\n\n    onTextChange = (event) =>{\n        if (event.target.value === \"\"){\n            this.onResetButton();\n        }\n    }\n\n\n    render(){\n        const {robots, searchfield} = this.state\n        const filtering = robots.filter(robot=>{\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n        });\n        return !robots.length ?\n            <h1>Loading Robots</h1>:\n        (\n        <div className='tc'>\n            <h1 className='f1 ma2'>Robo Friends!</h1>\n            <SearchBox searchChange={this.onSearchButton} reset={this.onResetButton} textChange={this.onTextChange}/>\n            <NavBar>\n                <ErrorBoundary>\n                    <CardArray props={filtering} />\n                </ErrorBoundary>\n            </NavBar>\n        </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}